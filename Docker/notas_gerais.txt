8th class conceitosDocker{
    não é um sistema de virtualização tradicional 

    é uma engine de adminitração de containers
    é isolado do sistema host, existe um sistema de arquivos isolado

    utiliza linux container lXC (linux container)

    openSource, o container usa  o kernel da maquina host

    empacota software com vários níveis de isolamento
}

10th class containers{
    sistema de arquivos isolado criados da imagem docker (modelo)
    ambientes leves e portáveis
    encapsula todos os binários e bibliotecas necessárias para execução de uma App
    
    é bom separar em contaners o back, o front o banco

    chroot = é um comando que redefine a pasta raiz de um processo que tu quer executar
}

11th class imagens docker{
    imagem é um modelo de sistema de arquivos usado para criar um container

    pode criar uma imagem a partir de um build e o comando commit (commit não é uma boa prática) 
    não tem um histórico, por isso não é bom vc não consegue ver o que fez pelo build

    cada mudança no arquivo é uma camada
    uma camada tbm é chamada de imagem intermediária
    só a última camada pode ser alterada quando o container for iniciado

    a junção das layers formam a imagem
}

12th class imagem x container{
    imagem é tipo uma classe e o container é a criação do Objeto da classe
}

13th class arquitetura docker{
    host = docker daemon == docker server == docker engine
    registry = docker hub (ambiente de núvem)
    client = app rest, >_(client linha de comando)
}

14th class instalação do docker{
    
}